package handler

import (
	"context"
	"log"

	"github.com/gofiber/fiber/v2"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
)

type User struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	Age  int    `json:"age"`
}

func SetupUserRoutes(app *fiber.App, db *pgxpool.Pool) {
	app.Post("/users", func(c *fiber.Ctx) error {
		go test var user User

		if err := c.BodyParser(&user); err != nil {
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON"})
		}

		user.ID = uuid.New().String()

		_, err := db.Exec(context.Background(),
			"INSERT INTO users (id, name, age) VALUES ($1, $2, $3)",
			user.ID, user.Name, user.Age,
		)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≤ –ë–î: %v", err)
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "–≤—Å—Ç–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å"})
		}

		return c.Status(fiber.StatusCreated).JSON(user)
	})

	app.Get("/users/:id", func(c *fiber.Ctx) error {
		id := c.Params("id")
		log.Println("üì• GET –∑–∞–ø—Ä–æ—Å –Ω–∞ ID:", id)

		var user User

		err := db.QueryRow(
			context.Background(),
			"SELECT id, name, age FROM users WHERE id = $1",
			id,
		).Scan(&user.ID, &user.Name, &user.Age)

		if err != nil {
			if err == pgx.ErrNoRows {
				return c.Status(fiber.StatusNotFound).JSON(fiber.Map{"error": "–Ω–µ –Ω–∞–π–¥–µ–Ω"})
			}
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ SELECT: %v", err)
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "–æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
		}

		return c.JSON(user)
	})

	app.Get("/users", func(c *fiber.Ctx) error {
		var users []User

		rows, err := db.Query(context.Background(), "SELECT id, name, age FROM users")
		if err != nil {
			log.Printf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è : ", err)
			return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "cannot get users"})
		}
		defer rows.Close()

		for rows.Next() {
			var u User
			if err := rows.Scan(&u.ID, &u.Name, &u.Age); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏", err)
				continue
			}
			users = append(users, u)
		}
		return c.JSON(users)
	})
}
